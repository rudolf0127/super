/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AssetStruct = {
  assetType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  amount: BigNumberish;
};

export type AssetStructOutput = [number, string, BigNumber, BigNumber] & {
  assetType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  amount: BigNumber;
};

export type ReceivedAssetStruct = {
  assetType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  amount: BigNumberish;
  account: string;
};

export type ReceivedAssetStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  assetType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  amount: BigNumber;
  account: string;
};

export type OrderComponentsStruct = {
  offerer: string;
  facilitator: string;
  orderType: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  salt: BigNumberish;
  offer: AssetStruct[];
  consideration: ReceivedAssetStruct[];
  nonce: BigNumberish;
};

export type OrderComponentsStructOutput = [
  string,
  string,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  AssetStructOutput[],
  ReceivedAssetStructOutput[],
  BigNumber
] & {
  offerer: string;
  facilitator: string;
  orderType: number;
  startTime: BigNumber;
  endTime: BigNumber;
  salt: BigNumber;
  offer: AssetStructOutput[];
  consideration: ReceivedAssetStructOutput[];
  nonce: BigNumber;
};

export type OrderParametersStruct = {
  offerer: string;
  facilitator: string;
  orderType: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  salt: BigNumberish;
  offer: AssetStruct[];
  consideration: ReceivedAssetStruct[];
};

export type OrderParametersStructOutput = [
  string,
  string,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  AssetStructOutput[],
  ReceivedAssetStructOutput[]
] & {
  offerer: string;
  facilitator: string;
  orderType: number;
  startTime: BigNumber;
  endTime: BigNumber;
  salt: BigNumber;
  offer: AssetStructOutput[];
  consideration: ReceivedAssetStructOutput[];
};

export type OrderStruct = {
  parameters: OrderParametersStruct;
  signature: BytesLike;
};

export type OrderStructOutput = [OrderParametersStructOutput, string] & {
  parameters: OrderParametersStructOutput;
  signature: string;
};

export type CriteriaResolverStruct = {
  side: BigNumberish;
  index: BigNumberish;
  identifier: BigNumberish;
  criteriaProof: BytesLike[];
};

export type CriteriaResolverStructOutput = [
  number,
  BigNumber,
  BigNumber,
  string[]
] & {
  side: number;
  index: BigNumber;
  identifier: BigNumber;
  criteriaProof: string[];
};

export type AdvancedAssetStruct = {
  assetType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
};

export type AdvancedAssetStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  assetType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  startAmount: BigNumber;
  endAmount: BigNumber;
};

export type AdvancedReceivedAssetStruct = {
  assetType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
  account: string;
};

export type AdvancedReceivedAssetStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  assetType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  startAmount: BigNumber;
  endAmount: BigNumber;
  account: string;
};

export type AdvancedOrderParametersStruct = {
  offer: AdvancedAssetStruct[];
  consideration: AdvancedReceivedAssetStruct[];
  startTime: BigNumberish;
  endTime: BigNumberish;
  offerer: string;
  salt: BigNumberish;
  facilitator: string;
  nonce: BigNumberish;
};

export type AdvancedOrderParametersStructOutput = [
  AdvancedAssetStructOutput[],
  AdvancedReceivedAssetStructOutput[],
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber
] & {
  offer: AdvancedAssetStructOutput[];
  consideration: AdvancedReceivedAssetStructOutput[];
  startTime: BigNumber;
  endTime: BigNumber;
  offerer: string;
  salt: BigNumber;
  facilitator: string;
  nonce: BigNumber;
};

export type AdvancedOrderStruct = {
  parameters: AdvancedOrderParametersStruct;
  signature: BytesLike;
};

export type AdvancedOrderStructOutput = [
  AdvancedOrderParametersStructOutput,
  string
] & { parameters: AdvancedOrderParametersStructOutput; signature: string };

export type AdvancedFulfillmentComponentStruct = {
  orderIndex: BigNumberish;
  assetIndex: BigNumberish;
  criteriaProof: BytesLike[];
};

export type AdvancedFulfillmentComponentStructOutput = [
  BigNumber,
  BigNumber,
  string[]
] & { orderIndex: BigNumber; assetIndex: BigNumber; criteriaProof: string[] };

export type AdvancedFulfillmentStruct = {
  identifier: BigNumberish;
  offerComponents: AdvancedFulfillmentComponentStruct[];
  considerationComponents: AdvancedFulfillmentComponentStruct[];
};

export type AdvancedFulfillmentStructOutput = [
  BigNumber,
  AdvancedFulfillmentComponentStructOutput[],
  AdvancedFulfillmentComponentStructOutput[]
] & {
  identifier: BigNumber;
  offerComponents: AdvancedFulfillmentComponentStructOutput[];
  considerationComponents: AdvancedFulfillmentComponentStructOutput[];
};

export type ExecutionStruct = { asset: ReceivedAssetStruct; offerer: string };

export type ExecutionStructOutput = [ReceivedAssetStructOutput, string] & {
  asset: ReceivedAssetStructOutput;
  offerer: string;
};

export type FulfillmentComponentStruct = {
  orderIndex: BigNumberish;
  assetIndex: BigNumberish;
};

export type FulfillmentComponentStructOutput = [BigNumber, BigNumber] & {
  orderIndex: BigNumber;
  assetIndex: BigNumber;
};

export type FulfillmentStruct = {
  offerComponents: FulfillmentComponentStruct[];
  considerationComponents: FulfillmentComponentStruct[];
};

export type FulfillmentStructOutput = [
  FulfillmentComponentStructOutput[],
  FulfillmentComponentStructOutput[]
] & {
  offerComponents: FulfillmentComponentStructOutput[];
  considerationComponents: FulfillmentComponentStructOutput[];
};

export interface ConsiderationInterfaceInterface extends utils.Interface {
  contractName: "ConsiderationInterface";
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "cancel((address,address,uint8,uint256,uint256,uint256,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[],uint256)[])": FunctionFragment;
    "facilitatorNonce(address,address)": FunctionFragment;
    "fulfillOrder(((address,address,uint8,uint256,uint256,uint256,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[]),bytes))": FunctionFragment;
    "fulfillOrderWithCriteria(((address,address,uint8,uint256,uint256,uint256,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[]),bytes),(uint8,uint256,uint256,bytes32[])[])": FunctionFragment;
    "fulfillPartialOrder(((address,address,uint8,uint256,uint256,uint256,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[]),bytes),uint256)": FunctionFragment;
    "getOrderHash((address,address,uint8,uint256,uint256,uint256,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[],uint256))": FunctionFragment;
    "incrementFacilitatorNonce(address,address)": FunctionFragment;
    "matchAdvancedOrders((((uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint256,uint256,address,uint256,address,uint256),bytes)[],(uint256,(uint256,uint256,bytes32[])[],(uint256,uint256,bytes32[])[])[])": FunctionFragment;
    "matchOrders(((address,address,uint8,uint256,uint256,uint256,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[]),bytes)[],((uint256,uint256)[],(uint256,uint256)[])[])": FunctionFragment;
    "name()": FunctionFragment;
    "orderUsedOrCancelled(bytes32)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [OrderComponentsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "facilitatorNonce",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOrderWithCriteria",
    values: [OrderStruct, CriteriaResolverStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillPartialOrder",
    values: [OrderStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderHash",
    values: [OrderComponentsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementFacilitatorNonce",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "matchAdvancedOrders",
    values: [AdvancedOrderStruct[], AdvancedFulfillmentStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [OrderStruct[], FulfillmentStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderUsedOrCancelled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facilitatorNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOrderWithCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillPartialOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementFacilitatorNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchAdvancedOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderUsedOrCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "FacilitatorNonceIncremented(address,address,uint256)": EventFragment;
    "OrderCancelled(bytes32,address,address)": EventFragment;
    "OrderFulfilled(bytes32,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "FacilitatorNonceIncremented"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFulfilled"): EventFragment;
}

export type FacilitatorNonceIncrementedEvent = TypedEvent<
  [string, string, BigNumber],
  { offerer: string; facilitator: string; nonce: BigNumber }
>;

export type FacilitatorNonceIncrementedEventFilter =
  TypedEventFilter<FacilitatorNonceIncrementedEvent>;

export type OrderCancelledEvent = TypedEvent<
  [string, string, string],
  { orderHash: string; offerer: string; facilitator: string }
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export type OrderFulfilledEvent = TypedEvent<
  [string, string, string],
  { orderHash: string; offerer: string; facilitator: string }
>;

export type OrderFulfilledEventFilter = TypedEventFilter<OrderFulfilledEvent>;

export interface ConsiderationInterface extends BaseContract {
  contractName: "ConsiderationInterface";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConsiderationInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      orders: OrderComponentsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fulfillOrder(
      order: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOrderWithCriteria(
      order: OrderStruct,
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillPartialOrder(
      order: OrderStruct,
      amountToFill: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOrderHash(
      order: OrderComponentsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    incrementFacilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchAdvancedOrders(
      orders: AdvancedOrderStruct[],
      fulfillments: AdvancedFulfillmentStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchOrders(
      orders: OrderStruct[],
      fulfillments: FulfillmentStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    orderUsedOrCancelled(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  cancel(
    orders: OrderComponentsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facilitatorNonce(
    offerer: string,
    facilitator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fulfillOrder(
    order: OrderStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOrderWithCriteria(
    order: OrderStruct,
    criteriaResolvers: CriteriaResolverStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillPartialOrder(
    order: OrderStruct,
    amountToFill: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOrderHash(
    order: OrderComponentsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  incrementFacilitatorNonce(
    offerer: string,
    facilitator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchAdvancedOrders(
    orders: AdvancedOrderStruct[],
    fulfillments: AdvancedFulfillmentStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchOrders(
    orders: OrderStruct[],
    fulfillments: FulfillmentStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  orderUsedOrCancelled(
    orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    cancel(
      orders: OrderComponentsStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    facilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillOrder(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillOrderWithCriteria(
      order: OrderStruct,
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillPartialOrder(
      order: OrderStruct,
      amountToFill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOrderHash(
      order: OrderComponentsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    incrementFacilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchAdvancedOrders(
      orders: AdvancedOrderStruct[],
      fulfillments: AdvancedFulfillmentStruct[],
      overrides?: CallOverrides
    ): Promise<ExecutionStructOutput[]>;

    matchOrders(
      orders: OrderStruct[],
      fulfillments: FulfillmentStruct[],
      overrides?: CallOverrides
    ): Promise<ExecutionStructOutput[]>;

    name(overrides?: CallOverrides): Promise<string>;

    orderUsedOrCancelled(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FacilitatorNonceIncremented(address,address,uint256)"(
      offerer?: string | null,
      facilitator?: null,
      nonce?: null
    ): FacilitatorNonceIncrementedEventFilter;
    FacilitatorNonceIncremented(
      offerer?: string | null,
      facilitator?: null,
      nonce?: null
    ): FacilitatorNonceIncrementedEventFilter;

    "OrderCancelled(bytes32,address,address)"(
      orderHash?: null,
      offerer?: string | null,
      facilitator?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      orderHash?: null,
      offerer?: string | null,
      facilitator?: null
    ): OrderCancelledEventFilter;

    "OrderFulfilled(bytes32,address,address)"(
      orderHash?: null,
      offerer?: string | null,
      facilitator?: null
    ): OrderFulfilledEventFilter;
    OrderFulfilled(
      orderHash?: null,
      offerer?: string | null,
      facilitator?: null
    ): OrderFulfilledEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      orders: OrderComponentsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillOrder(
      order: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOrderWithCriteria(
      order: OrderStruct,
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillPartialOrder(
      order: OrderStruct,
      amountToFill: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOrderHash(
      order: OrderComponentsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementFacilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchAdvancedOrders(
      orders: AdvancedOrderStruct[],
      fulfillments: AdvancedFulfillmentStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchOrders(
      orders: OrderStruct[],
      fulfillments: FulfillmentStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    orderUsedOrCancelled(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      orders: OrderComponentsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillOrder(
      order: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOrderWithCriteria(
      order: OrderStruct,
      criteriaResolvers: CriteriaResolverStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillPartialOrder(
      order: OrderStruct,
      amountToFill: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOrderHash(
      order: OrderComponentsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementFacilitatorNonce(
      offerer: string,
      facilitator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchAdvancedOrders(
      orders: AdvancedOrderStruct[],
      fulfillments: AdvancedFulfillmentStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchOrders(
      orders: OrderStruct[],
      fulfillments: FulfillmentStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderUsedOrCancelled(
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
